"use strict";const validTypes=["number","boolean","string","Color","Vertex","Move","List","MultiLineList","Alternative"];let whichClass=t=>"number"==typeof t||"boolean"==typeof t||"string"==typeof t?typeof t:Color.prototype.isPrototypeOf(t)?"Color":Vertex.prototype.isPrototypeOf(t)?"Vertex":Move.prototype.isPrototypeOf(t)?"Move":List.prototype.isPrototypeOf(t)?"List":MultiLineList.prototype.isPrototypeOf(t)?"MultiLineList":void 0;class Color{constructor(t){if("string"!=typeof t)throw"Parameter is not a color value";if("w"===(t=t.toLowerCase())||"white"===t)this.color="w";else{if("b"!==t&&"black"!==t)throw"Parameter is not a color value";this.color="b"}}toString(){return this.color}}class Vertex{constructor(t){if("string"!=typeof t)throw"Invalid Vertex Value";if("pass"!==t){if(t.length>3)throw"invalid vertex value";if("i"===t[0]||"I"===t[0])throw"invalid vertex value";let e=t.slice(1,3);if(!(!isNaN(e)&&e>0&&e<25))throw"Invalid vertex value: protocol doesn't support boards larger than 25x25";let r=t.charCodeAt(0),n=26;if(r>=65&&r<=90?n=r[0]<73?r-64:r-65:r>=97&&r<=122&&(n=r<105?r-96:r-97),n>25)throw"Invalid vertex value: protocol doesn't support boards larger than 25x25"}this.vertex=t}static indecies(t){if(!Vertex.prototype.isPrototypeOf(t))throw"Invalid Vertex Value";let e=t.toString()[0],r=parseInt(t.toString().slice(1,3)),n=e.charCodeAt(0),o=0;return n>=65&&n<=90?o=n[0]<73?n-64:n-65:n>=97&&n<=122&&(o=n<105?n-96:n-97),{row:r,column:o}}toString(){return this.vertex}}class Move{constructor(t){if("string"!=typeof t)throw"Invalid Move must be string containing a Color and a Vertex separated by a space";{if(2!==(t=t.split(" ")).length)throw"Invalid Move must be string containing a Color and a Vertex separated by a space";let e=null,r=null;try{e=new Color(t[0]),r=new Vertex(t[1])}catch(t){throw"Invalid Move must be string containing a Color and a Vertex separated by a space"}this.move=`${e.toString()} ${r.toString()}`}}toString(){return this.move}}class List{constructor(t){if(!validTypes.includes(t))throw"Invalid List type";this.type=t,this.items=[]}append(t){if(whichClass(t)!==this.type)throw"Invalid List Type";this.items.push(t)}appendAll(t){for(index in t){if(whichClass(t[index])!==this.type)throw"Invalid List Type";this.items.push(t[index])}}toString(){let t="";for(let e=0;e<this.items.length;e++)""===t?t=this.items[e].toString():t+=" "+this.items[e].toString();return t}apply(t){for(let e in this.items)this.items[e]=t(this.items[e])}}class MultiLineList{constructor(t){if(!validTypes.includes(t))throw"Invalid MultiLineList type";this.type=t,this.items=[]}append(t){if(whichClass(t)!==this.type)throw"Invalid List Type";this.items.push(t)}appendAll(t){for(index in t){if(whichClass(t[index])!==this.type)throw"Invalid List Type";this.items.push(t[index])}}toString(){let t="";for(let e=0;e<this.items.length;e++)t+=this.items[e].toString()+"\n";return t}apply(t){for(let e in this.items)this.items[e]=t(this.items[e])}}let socket=new WebSocket("ws://localhost:9002");Object.prototype.watch||Object.defineProperty(Object.prototype,"watch",{enumerable:!1,configurable:!0,writable:!1,value:function(t,e){var r=this[t],n=r;delete this[t]&&Object.defineProperty(this,t,{get:function(){return n},set:function(o){return r=n,n=e.call(this,t,r,o)},enumerable:!0,configurable:!0})}}),Object.prototype.unwatch||Object.defineProperty(Object.prototype,"unwatch",{enumerable:!1,configurable:!0,writable:!1,value:function(t){var e=this[t];delete this[t],this[t]=e}});let getArrowFunctionArgList=t=>{let e=t.toString().split("\n")[0].match(/\((.*?)\)/)[1].replace(/ /g,"").split(",");return e=1===e.length&&""===e[0]?[]:e,e},arraysMatch=(t,e)=>{if(t.length!==e.length)return!1;for(var r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0},toFloat=t=>{let e=parseFloat(t,10);if(e.toString()!==t)throw"not a float value";return e},toInt=t=>{let e=parseInt(t,10);if(e.toString()!==t)throw"not an integer value";return e},isInt=t=>"number"==typeof t&&t===parseInt(t,10)&&parseInt(t,10)>=0,matchBoards=(t,e)=>{if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++){if(t[r].length!==e[r].length)return!1;for(let n=0;n<t[r].length;n++)if(null!=t[r][n]||null!=e[r][n]){if(null==t[r][n]||null==e[r][n])return!1;if(t[r][n].color!==e[r][n].color)return!1}}return!0};const commandsList=["protocol_version","name","version","known_command","list_commands","quit","boardsize","clear_board","komi","fixed_handicap","place_free_handicap","set_free_handicap","play","genmove","undo","time_settings","time_left","final_score","final_status_list","loadsgf","reg_genmove","showboard","setboard"];let protocol_version=()=>2,name=()=>{let t=entities.List("string");return t.append("Go"),t.append("Slayer"),t},version=()=>{let t=List("string");return t.append("1.0.0"),t},known_command=t=>commandsList.includes(t),list_commands=()=>{let t=MultiLineList("string");return t.appendAll(commandsList),t},quit=()=>{},boardsize=t=>{try{t=toInt(t)}catch(t){throw`Invalid board size is ${t}`}if(t>25)throw"Invalid board size protocol doesn't support boards bigger than 25x25"},clear_board=()=>{},komi=t=>{try{t=toFloat(t)}catch(t){throw`Invalid Komi is ${t}`}},fixed_handicap=t=>{try{t=toInt(t)}catch(t){throw`Invalid number of stones is ${t}`}return List("Vertex")},place_free_handicap=t=>{try{t=toInt(t)}catch(t){throw`Invalid number of stones is ${t}`}return List("Vertex")},set_free_handicap=t=>{if(!List.prototype.isPrototypeOf(t)||"Vertex"!==t.type)throw"Invalid List of vertices"},play=t=>{t=new Move(t.toString());let e=new Color(t.toString().split(" ")[0]).toString(),r=Vertex.indecies(new Vertex(t.toString().split(" ")[1])),n=arraySize-(r.row-1),o=r.column-1;addPiece(o,n,e)},setboard=t=>{let e=new Array(19).fill(null).map(()=>new Array(19).fill(null));for(let r=0;r<19;r++)for(let n=0;n<19;n++){let o="."===t[19*r+n]?null:t[19*r+n];e[n][r]={color:o,selected:!1}}matchBoards(e,board)?alert("invalid move!!!"):(board=e,changePlayer(currentPlayer),currentPlayer="w"==currentPlayer?"b":"w",draw(ctx,canvas))},genmoveId=0,genmove=t=>{let e=new Color(t.toString());return currentPlayer=e.toString(),allowMove=!0,"break"};pieceLocation.watch("location",(t,e,r)=>{allowMove=!1,2!==r.length&&socket.send(`=${genmoveId} resign\n\n`);let n=(arraySize-(r[1]-1)).toString();n=1==n.length?`0${n}`:n;let o=r[0]+1<9?r[0]+97:r[0]+98,i=String.fromCharCode(o),s=new Vertex(`${i}${n}`);socket.send(`=${genmoveId} ${s.toString()}\n\n`)});let undo=()=>{},time_settings=(t,e,r)=>{try{t=toInt(t),e=toInt(e),r=toInt(r)}catch(t){throw"Invalid parameters must be integer values"}},time_left=(t,e,r)=>{try{e=toInt(e),r=toInt(r)}catch(t){throw"Invalid parameters must be integer values"}t=new Color(t.toString())},final_score=()=>{return""},final_status_list=t=>{if("string"!=typeof t)throw"invalid status value";return MultiLineList("List")},loadsgf=(t,e)=>{if("string"!=typeof t)throw"Invalid filename";try{e=toInt(e)}catch(t){throw`Invalid move number is ${t}`}},reg_genmove=t=>{if("Color"!=typeof t)throw"Invalid Argument: provided color is not of type color";return"resign"},showboard=()=>{return MultiLineList("List")},commands={protocol_version:protocol_version,name:name,version:version,known_command:known_command,list_commands:list_commands,quit:quit,boardsize:boardsize,clear_board:clear_board,komi:komi,fixed_handicap:fixed_handicap,place_free_handicap:place_free_handicap,set_free_handicap:set_free_handicap,play:play,genmove:genmove,undo:undo,time_settings:time_settings,time_left:time_left,final_score:final_score,final_status_list:final_status_list,loadsgf:loadsgf,reg_genmove:reg_genmove,showboard:showboard,setboard:setboard},makeRequest=(t,e,r=null)=>{if(!commandsList.includes(t))throw"Invalid Argument: command doesn't exist";if(null!==r&&!isInt(r))throw"Invalid Argument: id must be an integer";let n=getArrowFunctionArgList(commands[t]);if(!arraysMatch(n,Object.keys(e)))throw`Invalid Argument: ${t} arguments list should be [${n}], however, [${Object.keys(e)}] was provided`;let o="";null!==r&&(o+=`${r} `),o+=t;let i=Object.values(e);for(let t in i)o+=` ${i[t].toString()}`;return o+="\n",o},parseRequest=t=>{if("string"!=typeof t)throw`request must be string, however ${typeof t} was passed`;t=(t=t.replace(/\r?\n|\r/g,"")).split(" ");let e=null,r=null,n=null;return parseInt(t[0],10).toString()===t[0]?(e=toInt(t[0]),r=t[1],n=t.slice(2)):(r=t[0],n=t.slice(1)),{id:e,command:r,args:n}},takeRequest=t=>{let e=null;try{e=parseRequest(t)}catch(t){return`? ${t}\n\n`}let r=e.id,n=e.command,o=e.args,i=null!==r?`?${r}`:"?",s=null!==r?`=${r}`:"=";if(!commandsList.includes(n))return`${i} command doesn't exist\n\n`;if("play"===n&&(o=[o.join(" ")]),getArrowFunctionArgList(commands[n]).length!==o.length)return`${i} ${n} arguments doesn't match\n\n`;try{let t=commands[n](...o);return"break"===t?(genmoveId=null==r?"":r.toString(),"break"):void 0!==t?`${s} ${t.toString()}\n\n`:`${s}\n\n`}catch(t){return`? ${t}\n\n`}};socket.onopen=function(t){alert("[open] Connection established")},socket.onmessage=function(t){let e=takeRequest(t.data);"break"!==e&&socket.send(e)},socket.onclose=function(t){t.wasClean?alert(`[close] Connection closed cleanly, code=${t.code} reason=${t.reason}`):alert("[close] Connection died")},socket.onerror=function(t){alert(`[error] ${t.message}`)};