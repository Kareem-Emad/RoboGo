"use strict";const validTypes=["number","boolean","string","Color","Vertex","Move","List","MultiLineList","Alternative"];let whichClass=t=>"number"==typeof t||"boolean"==typeof t||"string"==typeof t?typeof t:Color.prototype.isPrototypeOf(t)?"Color":Vertex.prototype.isPrototypeOf(t)?"Vertex":Move.prototype.isPrototypeOf(t)?"Move":List.prototype.isPrototypeOf(t)?"List":MultiLineList.prototype.isPrototypeOf(t)?"MultiLineList":void 0;class Color{constructor(t){if("string"!=typeof t)throw"Parameter is not a color value";if("w"===(t=t.toLowerCase())||"white"===t)this.color="w";else{if("b"!==t&&"black"!==t)throw"Parameter is not a color value";this.color="b"}}toString(){return this.color}}class Vertex{constructor(t){if("string"!=typeof t)throw"Invalid Vertex Value";if("pass"!==t){if(t.length>3)throw"invalid vertex value";if("i"===t[0]||"I"===t[0])throw"invalid vertex value";let e=t.slice(1,3);if(!(!isNaN(e)&&e>0&&e<25))throw"Invalid vertex value: protocol doesn't support boards larger than 25x25";let n=t.charCodeAt(0),r=26;if(n>=65&&n<=90?r=n[0]<73?n-64:n-65:n>=97&&n<=122&&(r=n<105?n-96:n-97),r>25)throw"Invalid vertex value: protocol doesn't support boards larger than 25x25"}this.vertex=t}static indecies(t){if(!Vertex.prototype.isPrototypeOf(t))throw"Invalid Vertex Value";let e=t.toString()[0],n=parseInt(t.toString().slice(1,3)),r=e.charCodeAt(0),o=0;return r>=65&&r<=90?o=r[0]<73?r-64:r-65:r>=97&&r<=122&&(o=r<105?r-96:r-97),{row:n,column:o}}toString(){return this.vertex}}class Move{constructor(t){if("string"!=typeof t)throw"Invalid Move must be string containing a Color and a Vertex separated by a space";{if(2!==(t=t.split(" ")).length)throw"Invalid Move must be string containing a Color and a Vertex separated by a space";let e=null,n=null;try{e=new Color(t[0]),n=new Vertex(t[1])}catch(t){throw"Invalid Move must be string containing a Color and a Vertex separated by a space"}this.move=`${e.toString()} ${n.toString()}`}}toString(){return this.move}}class List{constructor(t){if(!validTypes.includes(t))throw"Invalid List type";this.type=t,this.items=[]}append(t){if(whichClass(t)!==this.type)throw"Invalid List Type";this.items.push(t)}appendAll(t){for(index in t){if(whichClass(t[index])!==this.type)throw"Invalid List Type";this.items.push(t[index])}}toString(){let t="";for(let e=0;e<this.items.length;e++)""===t?t=this.items[e].toString():t+=" "+this.items[e].toString();return t}apply(t){for(let e in this.items)this.items[e]=t(this.items[e])}}class MultiLineList{constructor(t){if(!validTypes.includes(t))throw"Invalid MultiLineList type";this.type=t,this.items=[]}append(t){if(whichClass(t)!==this.type)throw"Invalid List Type";this.items.push(t)}appendAll(t){for(index in t){if(whichClass(t[index])!==this.type)throw"Invalid List Type";this.items.push(t[index])}}toString(){let t="";for(let e=0;e<this.items.length;e++)t+=this.items[e].toString()+"\n";return t}apply(t){for(let e in this.items)this.items[e]=t(this.items[e])}}let socket=new WebSocket("ws://localhost:9002");Object.prototype.watch||Object.defineProperty(Object.prototype,"watch",{enumerable:!1,configurable:!0,writable:!1,value:function(t,e){var n=this[t],r=n;delete this[t]&&Object.defineProperty(this,t,{get:function(){return r},set:function(o){return n=r,r=e.call(this,t,n,o)},enumerable:!0,configurable:!0})}}),Object.prototype.unwatch||Object.defineProperty(Object.prototype,"unwatch",{enumerable:!1,configurable:!0,writable:!1,value:function(t){var e=this[t];delete this[t],this[t]=e}});let getArrowFunctionArgList=t=>{let e=t.toString().split("\n")[0].match(/\((.*?)\)/)[1].replace(/ /g,"").split(",");return e=1===e.length&&""===e[0]?[]:e,e},arraysMatch=(t,e)=>{if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0},toFloat=t=>{let e=parseFloat(t,10);if(e.toString()!==t)throw"not a float value";return e},toInt=t=>{let e=parseInt(t,10);if(e.toString()!==t)throw"not an integer value";return e},isInt=t=>"number"==typeof t&&t===parseInt(t,10)&&parseInt(t,10)>=0,matchBoards=(t,e)=>{let n="nothing";if(t.length!==e.length)return n;for(let r=0;r<t.length;r++){if(t[r].length!==e[r].length)return!1;for(let o=0;o<t[r].length;o++)if(null!=t[r][o]||null!=e[r][o])if(null!=t[r][o]||null==e[r][o]){if(null!=t[r][o]&&null==e[r][o]){n="remove";break}if(t[r][o].color!==e[r][o].color){n="remove";break}}else n="add"}return n};const commandsList=["protocol_version","name","version","known_command","list_commands","quit","play","setboard","genmove","undo","time_settings","time_left","final_score","final_status_list"];let protocol_version=()=>2,name=()=>{let t=entities.List("string");return t.append("Go"),t.append("Slayer"),t},version=()=>{let t=List("string");return t.append("1.0.0"),t},known_command=t=>commandsList.includes(t),list_commands=()=>{let t=MultiLineList("string");return t.appendAll(commandsList),t},quit=()=>{},play=t=>{t=new Move(t.toString());let e=new Color(t.toString().split(" ")[0]).toString(),n=Vertex.indecies(new Vertex(t.toString().split(" ")[1])),r=arraySize-(n.row-1),o=n.column-1;addPiece(o,r,e)},setboard=t=>{if("invalid"===t){let t="w"==currentPlayer?"player2 move is invalid":"player1 move is invalid";$.growl({title:"Error",message:t,style:"error"})}else{if(3!==(t=t.split(" ")).length)throw"invalid state";updatePlayer1Stones(toInt(t[0])),updatePlayer2Stones(toInt(t[1]));let n=t[2];var e=new Array(arraySize+1).fill(null).map(()=>new Array(arraySize+1).fill(null));for(let t=0;t<19;t++)for(let r=0;r<19;r++){let o="."===n[19*t+r]?null:{color:n[19*t+r]};e[r][t]=o}let r=matchBoards(board,e);"add"===r?addSound.play():"remove"===r&&removeSound.play(),board=e,changeTurn(),draw(ctx,canvas)}},genmoveId=0,genmove=t=>{let e=new Color(t.toString());return currentPlayer=e.toString(),allowMove=!0,"break"};pieceLocation.watch("location",(t,e,n)=>{allowMove=!1,null===n&&socket.send(`=${genmoveId} pass\n\n`);let r=(arraySize-(n[1]-1)).toString();r=1==r.length?`0${r}`:r;let o=n[0]+1<9?n[0]+97:n[0]+98,i=String.fromCharCode(o),s=new Vertex(`${i}${r}`);socket.send(`=${genmoveId} ${s.toString()}\n\n`)});let undo=()=>{},time_settings=(t,e,n)=>{try{t=toInt(t),e=toInt(e),n=toInt(n)}catch(t){throw"Invalid parameters must be integer values"}},time_left=(t,e,n)=>{try{e=toInt(e),n=toInt(n)}catch(t){throw"Invalid parameters must be integer values"}t=new Color(t.toString())},final_score=()=>{return""},final_status_list=t=>{if("string"!=typeof t)throw"invalid status value";return MultiLineList("List")},commands={protocol_version:protocol_version,name:name,version:version,known_command:known_command,list_commands:list_commands,quit:quit,play:play,setboard:setboard,genmove:genmove,undo:undo,time_settings:time_settings,time_left:time_left,final_score:final_score,final_status_list:final_status_list},makeRequest=(t,e,n=null)=>{if(!commandsList.includes(t))throw"Invalid Argument: command doesn't exist";if(null!==n&&!isInt(n))throw"Invalid Argument: id must be an integer";let r=getArrowFunctionArgList(commands[t]);if(!arraysMatch(r,Object.keys(e)))throw`Invalid Argument: ${t} arguments list should be [${r}], however, [${Object.keys(e)}] was provided`;let o="";null!==n&&(o+=`${n} `),o+=t;let i=Object.values(e);for(let t in i)o+=` ${i[t].toString()}`;return o+="\n",o},parseRequest=t=>{if("string"!=typeof t)throw`request must be string, however ${typeof t} was passed`;t=(t=t.replace(/\r?\n|\r/g,"")).split(" ");let e=null,n=null,r=null;return parseInt(t[0],10).toString()===t[0]?(e=toInt(t[0]),n=t[1],r=t.slice(2)):(n=t[0],r=t.slice(1)),{id:e,command:n,args:r}},takeRequest=t=>{let e=null;try{e=parseRequest(t)}catch(t){return`? ${t}\n\n`}let n=e.id,r=e.command,o=e.args,i=null!==n?`?${n}`:"?",s=null!==n?`=${n}`:"=";if(!commandsList.includes(r))return`${i} command doesn't exist\n\n`;if("play"!==r&&"setboard"!==r||(o=[o.join(" ")]),getArrowFunctionArgList(commands[r]).length!==o.length)return`${i} ${r} arguments doesn't match\n\n`;try{let t=commands[r](...o);return"break"===t?(genmoveId=null==n?"":n.toString(),"break"):void 0!==t?`${s} ${t.toString()}\n\n`:`${s}\n\n`}catch(t){return`? ${t}\n\n`}};socket.onopen=function(t){let e="a";"human"===player1?e="h":"remote"===player1&&(e="r");let n="a";"human"===player2?n="h":"remote"===player2&&(n="r"),socket.send(`game_config ${e} ${n}`)},socket.onmessage=function(t){let e=t.data.split(" ");if(3===e.length&&"end"===e[0]){let t="b"===e[1]?player1_name:player2_name;window.location=`./finish.html?winner=${t}&score=${e[2]}`}else{let e=takeRequest(t.data);"break"!==e&&socket.send(e)}},socket.onclose=function(t){t.wasClean},socket.onerror=function(t){alert(`[error] ${t.message}`)};